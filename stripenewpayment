import json
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import stripe
from .models import Order  # Import your Order model

stripe.api_key = settings.STRIPE_SECRET_KEY
endpoint_secret = settings.STRIPE_ENDPOINT_SECRET  # Set this in your settings

@csrf_exempt
def stripe_webhook(request):
    if request.method == 'POST':
        payload = request.body
        sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')
        event = None

        try:
            # Verify the webhook signature
            event = stripe.Webhook.construct_event(
                payload, sig_header, endpoint_secret
            )
        except ValueError as e:
            # Invalid payload
            return HttpResponse(status=400)
        except stripe.error.SignatureVerificationError as e:
            # Invalid signature
            return HttpResponse(status=400)

        # Handle the event
        if event['type'] == 'checkout.session.completed':
            session = event['data']['object']
            order_id = session.get('metadata', {}).get('order_id')

            # Retrieve and save the order details
            if order_id:
                try:
                    # Save order details here
                    Order.objects.create(
                        # Populate with the necessary data from session or other sources
                        order_id=order_id,
                        # Other fields as required
                    )
                except Exception as e:
                    # Handle any errors that occur while saving the order
                    print(f"Error saving order: {str(e)}")

        return HttpResponse(status=200)

    return HttpResponse(status=400)
